[["index.html", "EcoMods Booklet Chapter 1 Hello and welcome to the EcoMods working group! 1.1 Usage 1.2 Render book 1.3 Preview book", " EcoMods Booklet The EcoMods Würzburg 2022-06-07 Chapter 1 Hello and welcome to the EcoMods working group! In this document, you will (hopefully) find everything you need for your course/internship/thesis with us. The very first things you should do before starting your work are: subscribe to the CCTB and EcoMods mailing lists. Select CCTB and ecomod-cctb and register using your email address. These lists are used for announcements of talks or other important events. get an account in the CCTB server. Our IT support, Patrick Haag (patrick.haag(at)uni-wuerzburg.de), can do this for you. get access to the building. Your student ID card needs to be unlocked to be able to use it as a key for all doors. Patrick will also help you with this. remind your supervisor to send you an invitation link for our Mattermost. We use Mattermost for CCTB-wide communication. Be aware that the certificate for enabling https is self-signed. This means when you visit the Mattermost site for the first time, you will have to add it as an exception. Mattermost contains channels for different purposes like organizational stuff, lunch planning, working groups, etc. It is very similar to Slack, if you have used that before. There is also a Desktop App. save these time slots for obligatory participation: weekly CCTB seminar, Wednesdays 11:00-12:00 weekly EcoMods lab meeting, Thursdays 13:30-15:00 we also have a CCTB Gathertown which is basically a virtual office space. It was used a lot during home office times, now, not as much anymore. But if you post on Mattermost that you would like to meet for a virtual coffee break, people will show up! if you ever run into any IT-related problems that you cannot solve alone, post it in the Mattermost IT channel. Juliano, do you have scripts for these points below that I could link? Playing with R Codes - Intro R - First Models - Intro Ecological Functions and Simulations Exercise - First Functions and Simulations - Shiny This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 1.1 Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 1.2 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select “All formats” if you’d like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, you’ll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 1.3 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book”, or from the R console: bookdown::serve_book() "],["basic-tools.html", "Chapter 2 Basic tools 2.1 Programming in general 2.2 R 2.3 Julia, the language 2.4 Git 2.5 Computational Notebooks 2.6 Bash commands 2.7 latex 2.8 Advanced 2.9 Backup and Storage of Data and Code", " Chapter 2 Basic tools The most commonly used programming languages in our lab are R and Julia. They are both great languages for biology-related programming and statistical analysis. If you already know how to program and are looking for a challenge, our lab members enjoy participating in Advent of Code. It forces you to think outside the box and will teach you some new tricks! 2.1 Programming in general If you have never programmed before, …. crash course 2.2 R R is very well-established and probably has the most support from all the languages we use. Most of the time, you can copy-paste your error message from R into Google, and you will find several solutions for your problem. A very helpful website is Stack Overflow. 2.2.1 Interface In our lab, most people use RStudio when they are working in R. RStudio allows you to very easily write and execute your scripts, create plots and keep an eye on your environment. It also includes a helpful debugging mode. Other, not as commonly used GUIs are RKWard, BlueSky and R Commander. 2.2.2 Resources To get started, there are several books on how to use R. R for Data Science: “You’ll learn how to get your data into R, get it into the most useful structure, transform it, visualise it and model it.” Advanced R: “The book is designed primarily for R users who want to improve their programming skills and understanding of the language. It should also be useful for programmers coming to R from other languages, as help you to understand why R works the way it does.” Further reading: Coding Etiquette (in R) - slides from Anne prepared for BioInfo F2 2020 (Where to store?) Troubleshooting in R - Slides from Anne prepared for BioInfo F2 2020 R for Dummies, Andrie de Vries &amp; Joris Meys, 2015 (PDF available, ask Jana) 2.2.3 Packages What are R packages? If you have a problem that you need a certain function to solve, many times you do not need to write that function from scratch yourself. Usually, another (more skilled) person has already written some code that solves this problem. These “packages of code” can be uploaded to CRAN (the Comprehensive R Archive Network) and then downloaded to be used by other users. An example: You have a nice plot and want to ensure it is easy to read and interpret for colorblind people. Now you could set all of your 200 colors by hand so that it is not the default red-green nightmare, but it is much easier to just download a package called “viridis” that contains multiple color palettes that are optimized for this very use. Then, all you need to do is tell R to use the viridis palette instead of setting all colors by hand, which would get very tedious. Installing and loading a package via CRAN: install.packages(&quot;PackageName&quot;) library(PackageName) Note that packages need to be loaded into your environment using the library() command in order for R to use them. You can also download packages that are not yet on CRAN using devtools. Commonly used packages in our working group include (but are not limited to): tidyverse here devtools ggplot2 viridis raster rgdal 2.2.4 Rmd R Markdown is a great way to create documents in HTML, Word or PDF format. Rmds can include chunks of code which create the tables and plots of the document. This way, you don’t have to update your document parallel to your code, as you keep both your code to create your plots and said plots in the file. This file was also created using Rmd! Best overall guide A future alternative might be quarto. Resources from course SystemAdmin 2020, prepared by Anne. Where to store? 2.3 Julia, the language Julia is a relatively new programming language with a significantly higher performance than R. For complex models that take a lot of time to run in R, it might make sense to transfer them to Julia. While it has many advantages, it is not as well-known as R, so you may need to search for an explanation for your error message a bit longer. Julia has its own Discourse page with many helpful entries and tutorials as well. The Julia Documentation is also VERY good. To quickly look up Julia syntax, you can use this Cheat Sheet. 2.3.1 Best tutorials To get started, here is a very nice book for beginners by Ben Lauwens and Allen Downey that explains not only the Julia language, but also introduces the concept of programming in general. JuliaAcademy offers an introductory course that is tried and liked by Robin. If you are not that into reading, the official Julia Programming Language Youtube channel has some very nice tutorials structured by playlists. One especially helpful playlist is Julia Programming for Nervous Beginners. They also hold the annual JuliaCon online and upload the speaker’s talks to Youtube if you cannot be there live. 2.3.2 Plotting in Julia Plots in Julia can be a bit more tricky than in R (but that might be because we are used to plotting in R - don’t let this discourage you from plotting your heart out in Julia if that is what you want to do!). Here are some packages that may help facilitate your plotting adventures: This page shows a list of graphical plotting packages GLMakie is used by Robin 2.3.3 Interface As for R, you can choose from a variety of interfaces for Julia. In our working group, these are the most common ones: Atom and Juno for julia. Here is a nice tutorial on how to set it up. However, even though popular in our lab, Juno will receive no more feature updates as of March 2022, so if you are new to Julia, it might be best to choose a different IDE. VSCode is the successor of Juno. It works in a similar way and is also used by some members of our lab and is at this point the recommended option to use. if you are interested in using a Computational Notebook (see section below), Jupyter might be a good fit for you. Learn how to use Jupyter and Julia together here. This is still a bit buggy, though. 2.4 Git Git is a great software that allows you to keep track of the changes you make in your code (version control). This way, you will not need to keep several files named “Code_02_revised” and “Code_02_revised_changed” etc, which can quickly get confusing. There are different servers that you can store your repositories on, the most common ones being GitHub and GitLab. You can install git on your PC and use it via the commandline, or you can use it with the help of a UI, like GitHub Desktop. This is a very helpful Training and Tutorial that explains what git is and how to use it very nicely. 2.5 Computational Notebooks These are files that allow you to write descriptive text, code, and the output of that code. They are particularly useful for: learning and teaching coding, because the code and its output are shown together, so you always know what does what documenting analysis/model development, because, besides the outputs of the code you are trying out, descriptive text can help elaborate your ideas better, and even include figures or links in the same file as the code you are working on. sharing computational work: Your collaborator/supervisor will be able to follow your reasoning with the descriptive text and check your work in the code blocks and its outputs. See the complete tutorial here. 2.6 Bash commands When we let our models run, they tend to need a lot of computational power. Running experiments on your laptop can take days, weeks or even months. Therefore, we can send our scripts to more powerful machines from the University infrastructure. To tell the computer “execute script XXX” you need to write a short shell using bash. A nice tool to use for bash scripts is shellcheck - Robin For an example bash script see section IT infrastructure - Using HPC Julia 2.7 latex Latex is a software to write text. You can find thousands of tutorials online. If you want to work with latex on shared documents, consider overleaf. 2.8 Advanced 2.8.1 Singularity https://sylabs.io/guides/3.5/user-guide/quick_start.html Singularity is a way to use containers, small virtual machines that use the resources of the computer they run on but have their own environment. This will only be a short explanation on how to use them otherwise refer to the official documentation. Before a container can be used it first has to be built. This can be done by either using a .def file (Only if you have sudo rights on the local machine and under Linux so use Linux or WSL) or you can get it on the base of an existing container in the Singularity library or from docker. Prebuilt containers on the gaias are stored in /storage/singularity_images. ecomodsdm.sif is a container based on docker://rocker/geospatial The main ways to use Singularity containers are with the commands: - - singularity shell [container.sif] opens a shell in the provided container - singularity exec [container.sif] This executes a predefined command as defined in the definition file - singularity exec [container.sif] [command] This only executes the requested command e.g. opens R or executes a program By default /home/$USER is bound into the container at execution. If more folders need to be bound into it do this with the --bind [local]:[container] option 2.8.2 EMACS, Vim, and Spacemacs ???? 2.8.3 Regex Robin A handy website that goes through the basics of Regular Expression grammar: https://ryanstutorials.net/regular-expressions-tutorial https://regex101.com/ 2.9 Backup and Storage of Data and Code "],["it-infrastructure.html", "Chapter 3 IT infrastructure 3.1 SSH 3.2 Using HPC Julia 3.3 Using slurm 3.4 Using CCTB Server = gaias and planets 3.5 X2GO", " Chapter 3 IT infrastructure See the CCTB WueCampus course for documentation of our computing tools and tutorials for common software. In general, there are two powerful computers that you can run your code on - the Julia HPC cluster and the gaias. The gaias are the owned by the CCTB, while the Julia HPC belongs to the faculties of Biology, Physics and Chemistry and is maintained by the Rechenzentrum. See below on how to connect to the respective servers. 3.1 SSH 3.1.1 Connect with SSH Anne I have a .pdf tutorial - where should I store that? There’s several ways to connect directly to the servers. Apple and Linux have inbuilt ssh clients in the terminal. From Windows 10 onward powershell also comes with an ssh client, though be aware it does have some hiccups. For simple tasks PuTTy is sufficient. If you’re trying something more complicated (ssh tunnel) you could try git bash or get Windows Subsystem for Linux 3.1.2 Using SSH to authenticate your Github account TODO: move to Github section SSH stands for secure shell protocol. It allows you to securely connect to a remote computer using a commandline interface. Please note that you must be connected to the university network (e.g. via VPN) to access our servers. 3.1.2.1 Step 1: Generate an SSH keypair on the server and copy public key to Github TODO what github docs should be checked? For details, check Github Docs. Following instructions are adapted from here. Log in to the server (e.g. Curta). Check if you have existing ssh keys with ls -al ~/.ssh Generate a new ssh key (If you have existing keys, jump to step 5): #TODO what do you mean jump to step 5?? there is only two steps? ssh-keygen -t ed25519 -C &quot;your_email@example.com Make sure that you use the email that you also used for your Github account. Accept the default file name by pressing Enter key and type a password when prompted. You can also leave the password blank if you don’t want to protect your SSH key with an additional password. Start your ssh agent: eval &quot;$(ssh-agent -s)&quot; Add your new ssh key to ssh agent. If your key has a different name, replace id_ed25510 with the respective name of your key ssh-add -K ~/.ssh/id_ed25519 Add your new ssh key to your Github account (the public key): First, copy the public ssh key with (or any other method of copying of your choice): cat ~/.ssh/id_ed25519.pub Now the key should be printed to the terminal. Copy the key (it starts with ssh-ed255…. and ends with your email address) to the clipboard. Go to your Github account, click the icon on the upper-right corner &gt; Settings &gt; SSH and GPG Keys &gt; Click New SSH key. Give your new ssh key a name and paste the copied key in the key text area. Then click Add SSH Key and if prompted, type your account’s password. 3.1.2.2 Step 2: Test the connection You can test the connection with ssh -T git@github.com It can be that the host cannot be authorized the first time that you try to connect. If you want to add Github to the known hosts, you can just type yes and the next time you won’t see this warning anymore. Now you can clone, push and pull from a repository without having to enter your password and username all the time. Note: This only works if you clone a repository via ssh and not via https! 3.1.3 ssh alias When using ssh, scp or rsync on Linux to connect to or move files always having to type out a user and IP adress can get tiring. There’s a couple ways around that but the easiest is provided by the ssh tool itself. It is possible to configure an alias that replaces the whole user and IP address and can be filled with the autocomplete. To accomplish this: find the path where your ssh configuration is located. This should be a folder in your user folder called .ssh (When using ls it only shows you the some of the folders, use ls -a to find folders leading with a dot.) move into the folder (cd ssh) and create a file named config (eg. touch config) in the file the configuration is formatted like the following: HOST hostname1 SSH_OPTION value SSH_OPTION value HOST hostname2 SSH_OPTION value HOST * SSH_OPTION value more specific options go to the top, more general ones further down. Everything in Hostname * is for all ssh sessions. If you were to configure a shortcut for say gaia5 it would look something like this: Host gaia5 User yourusername HostName 132.187.198.19 4.Write into the file and save it. You should now be able to use your shortcut with ssh. for further details you can check online, I found this site also explains it nicely and in more detail: https://linuxize.com/post/using-the-ssh-config-file/ TODO: how to do a key pair 3.2 Using HPC Julia Robin - check over it General information by the Julia support The Julia HPC Cluster only coincidentally has the same name as the Julia Programming language. You can use it to run your models and also store your data on it if you want. Here is how to use it: The first step to using the Julia HPC Cluster is to get an account. To do this, go here. Simply go to “Benutzer freischalten” at the very bottom of the page and choose “Ecosystem Modeling” from the drop down menu. You should soon get an email about your account being created. Now it’s time to get started! Depending on your PC’s operating system, you will access the HPC differently. on Windows: install PuTTy and WinSCP. WinSCP allows you to transfer data between the cluster and your own PC. With PuTTy, you can access the HPC and tell it what to do. Connect to both via your JMU-Account name like so: name[at]julia.uni-wuerzburg.de and your JMU password. In PuTTy, you will need to use linux commands for the cluster. A linux tutorial can be found here. on linux: add how to here You will probably need to install all packages for R and julia that the code you want to run uses. You can do this in R very easily. Type R and press enter for R to open. Then, give the command install.packages(\"package\") as you usually would. The packages should install without problem. For julia, you might need to install it first. Instructions can be found here To install the packages, start Julia by typing julia and pressing enter. Then, type using Pkg and install your packages as usual with Pkg.add(\"package\"). You can use your normal scripts that you also use to run your code on your PC. Just double check that there are no absolute path names. Remember to save results! To execute your script, you need a bash file. A good way to create these files is using Notepad++. Open Notepad++ and create a new file (top left). Important: go to Edit, Format end of line and choose UNIX. Otherwise, the cluster will not be able to read your file. In your bash file, your code will look something like this for running an R script: #!/bin/bash #SBATCH -J #NameOfJob #SBATCH -c 2 #this is your number of cores to use #SBATCH --mail-type=ALL #if you want to receive emails when your job starts/fails/finishes, very handy #SBATCH --mail-user=name\\@uni-wuerzburg.de #(mailto:mail-user=name@uni-wuerzburg.de){.email} #(your email address) \\ #SBATCH -p test #(where do you want your job to run?) #SBATCH -t 3-00:00:00 #(how much time is allocated at maximum?) #SBATCH --mem=100G #(how much memory do you need?) Rscript &quot;Test.R&quot; Run your bash script using “sbatch name.sh”. You can use “squeue” to check if your code is pending (PD) or running (R). Depending on your settings in the bash script, you might get email notifications about your job. When it has finished, you can transfer the results from the cluster to your PC using WinSCP. Happy coding! 3.2.1 Calculate you CO2 Emission from HPC Step 1: log into HPC and run the following command sacct --user=&lt;your-user&gt; --starttime=2021-01-01 --format=&#39;CPUTimeRAW&#39; &gt; usage_2021.txt Step 2: Download usage_2021.txt from HPC Step 3: Open usage_2021.txt locally and remove the second row wi Step 4: Use R to calculate CPU hours usage &lt;- readr::read_csv(&quot;usage_2021.txt&quot;) dplyr::summarize(usage, sum_CPU_hours = sum(CPUTimeRAW)/60/60) Step 5: Calculate climate impact Go to https://green-algorithms.org/ Enter the following for HPC: Runtime: number calculated above Type of cores: CPU Number of cores: 1 (because the hours are CPU hours) Model: Any Memory available: average memory that you used (I put 10 GB) Platform: Local server Select correct location and put no to all additional questions asked about CPU 3.3 Using slurm Robin SLURM is the resource manager running on the gaias and the julia log-in node. It’s job is to distribute tasks thorough the run-time among the planets so you and others can all use them at the same time. While the julia cluster has a resource manager the planets don’t and queue everything directly regardless of how often you’ve used it so please be considerate. Some of the most common commands are: - srun [command] gives the following command directly to SLURM and has it output to your current shell. If you get disconnected in the meantime you won’t be able to reconnect so be careful - sbatch [batchscript] passes a job script to SLURM and puts it in the queue. One of the planets will execute all the steps in the job script and puts all the output in a .out file as specified in the options. You can also use an sbatch script to submit several jobs at the same time - scancel [jobid] use this to cancel a running job - squeue show currently running jobs - sinfo show current status of the whole cluster - sstat [jobid] give stats of a currently running or recently finished job Here are some of the most useful options for srun and sbatch(reminder: you can always check for more options yourself by putting in srun --help or search for man srun ): - --job-name gives your job a name for squeue and the like - --output where to put the output of your batch file. Default is slurm-%A_%a.out where %A is the job ID and %a is the array index. - -n --ntasks how many tasks you want to have run simultaneously. - -t --time Maximum time your job will run. If it runs longer it will be killed - --mem request this much memory. Default is in MB, add G to request GB. If you don’t specify the whole node will be requested. - -w --nodelist request a specific node or list of nodes, they will all be used--a –arrayrequests a job array -–mail-typeSLURM can send you mails to update you about the status of your jobs. Most common is ALL, check documentation for more. -–mail-userSet your email here Here's another summary by the people who make SLURM: https://slurm.schedmd.com/pdfs/summary.pdf Helpful commands are: -srun -w [node] –mem=[needed memory] –pty bashrequests to open a bash run time on the specified node. You can either start R or Julia from here or check how much memory or CPU is used withhtop` 3.4 Using CCTB Server = gaias and planets Here at the CCTB our own servers are the gaias and the planets. While the gaias are more powerful than your own PC their main job is to be used for smaller tasks and to serve as log-in nodes to get access to the more powerful planets. running smaller bits of code on the gaias is no problem, but if you have more consider having it run on the planets. 3.4.1 Opening an Rstudio server on the planets An Rstudio server works basically the same way as Rstudio on your local machine. Only that your code is running somewhere else so you are able to access the power of our computational infrastructure. Find the script rstudio-server.sh in internal/scripts and copy it to a directory on one of the gaias you are using. From your chosen directory start the SLURM job with the command sbatch rstudio-server.sh SLURM will tell you your job is running and gives you your job ID. Open the log file that was created with your job number (you can use something like cat or less) cat rstudio-server.job.[jobID] Follow the instructions in the job file. These should be to connect via a ssh tunnel (on windows 10 and up you can use powershell, if that doesn’t work refer to the ssh section), open your favorite browser and point it to localhost:8787where you’ll find a log-in screen for your rstudio server. Log-in with the given credentials. When you are done close the server by pressing the off button on the top right and cancel the SLURM job by entering scancel -f [jobID] Some notes:\\ The way the base script works after 8 hours SLURM will send a termination signal to the r server which will then save everything and next time you open a new session you should again have your environment back If you need more memory or a longer run time you can change it in the script header using typical SLURM syntax See the section on Singularity and containers (in progress) if you want to change anything about the container. You will probably have to change quite a bit of the script to use a different one than the one that’s used The way this job script is set up you can’t install new R packages. This is so this will work out of the box with no conflicts. You can enable access of the R session to other packages by commenting out line 31 export R_LIBS_USER=/usr/local/lib/R/library,/usr/local/lib/R/site-library at your own risk. The script is based on Rocker 3.5 X2GO "],["parts.html", "Chapter 4 Parts", " Chapter 4 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 5 Footnotes and citations 5.1 Footnotes 5.2 Citations", " Chapter 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one.1 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2022) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
